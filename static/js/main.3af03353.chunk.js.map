{"version":3,"sources":["StatusContext.js","FontAwesome.js","Components/Navigation.js","Components/StatusIcon.js","Components/Node.js","Components/NodeCard.js","Components/AlertList.js","Components/Indicator.js","Components/StatusCard.js","Components/Dashboard.js","logo.png","App.js","reportWebVitals.js","index.js"],"names":["NodesContext","createContext","StatusProvider","props","useState","statuses","setStatuses","useEffect","fetchDataFromServer","a","fetch","res","json","data","nodes","setAllData","forEach","node","push","Provider","value","children","library","add","faCheckSquare","faSquare","faExclamationTriangle","faExclamation","faCircle","faCheck","faGhost","faChevronLeft","Navigation","title","navigate","useNavigate","className","onClick","icon","StatusIcon","count","status","getIconColor","getSignColor","statusIcon","shape","shapeStyle","sign","signStyle","Node","propPath","propNode","nodeFromLink","useLocation","state","newNode","path","breadcrumb","length","crumb","stringifyBreadcrumb","breadCrumb","toString","output","NodeCard","to","AlertList","globalNodes","useContext","alertCards","topNode","find","getAlertsForNode","concat","undefined","innerNode","map","Indicator","StatusCard","statusCard","nodeStatus","nodeStat","Dashboard","statusCardsData","newNodeStatus","statusCardData","getStatusForAllNodes","getStatusCardsData","App","element","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3af03353.chunk.js","sourcesContent":["import { useState, createContext, useEffect } from \"react\";\n\nexport const NodesContext = createContext();\n\nexport const StatusProvider = (props) => {\n  const [statuses, setStatuses] = useState([]);\n\n  useEffect(() => {\n    const fetchDataFromServer = async () => {\n      const res = await fetch(\"http://localhost:5000/data\");\n      const data = await res.json();\n      return data;\n    };\n\n    let nodes = [];\n\n    const setAllData = async () => {\n      const nodesData = await fetchDataFromServer();\n\n      nodesData.forEach((node) => {\n        nodes.push(node[2]);\n      });\n      setStatuses(nodes);\n    };\n\n    setAllData();\n  }, []);\n\n  return (\n    <NodesContext.Provider value={statuses}>\n      {props.children}\n    </NodesContext.Provider>\n  );\n};\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCheckSquare,\n  faSquare,\n  faExclamationTriangle,\n  faExclamation,\n  faCircle,\n  faCheck,\n  faGhost,\n  faChevronLeft\n} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(\n  faCheckSquare,\n  faSquare,\n  faExclamationTriangle,\n  faExclamation,\n  faCircle,\n  faCheck,\n  faGhost,\n  faChevronLeft\n);","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useNavigate } from \"react-router-dom\";\n\nconst Navigation = ({title}) => {\n    const navigate = useNavigate();\n    return (\n        <div className=\"row nav\">\n        <button onClick={() => navigate(-1)}>\n          <FontAwesomeIcon icon={faChevronLeft} className=\"back\" />\n        </button>\n        <h4 className=\"right\">{title}</h4>\n      </div>\n    )\n}\n\nexport default Navigation\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst StatusIcon = ({ count, status }) => {\n  \n  let getIconColor = () => {\n    if (count === \"0\") {\n      return \"disabled\";\n    }\n    return status === \"0\"\n      ? \"ok\"\n      : status === \"1\"\n      ? \"warning\"\n      : status === \"2\"\n      ? \"danger\"\n      : \"disabled\";\n  };\n\n  let getSignColor = () => {\n    return count > \"0\" ? \"white\" : \"mine-shaft-light\";\n  };\n\n  const getOkIcon = () => {\n    return {\n      shape: \"circle\",\n      shapeStyle: \"fas \" + getIconColor(),\n      sign: \"check\",\n      signStyle: \"fas sign \" + getSignColor(),\n    };\n  };\n\n  const getWarningIcon = () => {\n    return {\n      shape: \"exclamation-triangle\",\n      shapeStyle: \"fas triangle \" + getIconColor(),\n      sign: \"exclamation\",\n      signStyle: \"fas sign ghost \" + getSignColor(),\n    };\n  };\n\n  const getDangerIcon = () => {\n    return {\n      shape: \"square\",\n      shapeStyle: \"fas \" + getIconColor(),\n      sign: \"exclamation\",\n      signStyle: \"fas sign \" + getSignColor(),\n    };\n  };\n\n  const getErrorIcon = () => {\n    return {\n      shape: \"circle\",\n      shapeStyle: \"fas white\",\n      sign: \"exclamation\",\n      signStyle: \"fa sign disabled\",\n    };\n  };\n\n  const getStatusIcon = () => {\n    return status === \"0\" // \"ok\"\n      ? getOkIcon()\n      : status === \"1\" // \"warning\"\n      ? getWarningIcon()\n      : status === \"2\" // \"danger\"\n      ? getDangerIcon()\n      : getErrorIcon();\n  };\n\n  let statusIcon = getStatusIcon();\n\n  return (\n    <div className=\"fa-layers inner-indicator\">\n      <FontAwesomeIcon\n        icon={statusIcon.shape}\n        className={statusIcon.shapeStyle}\n      />\n      <FontAwesomeIcon\n        icon={statusIcon.sign}\n        className={statusIcon.signStyle}\n      />\n    </div>\n  );\n};\n\nexport default StatusIcon;\n","import { useLocation } from \"react-router-dom\";\nimport StatusIcon from \"./StatusIcon\";\nimport Navigation from \"./Navigation\";\n\nconst Node = ({ propPath, propNode }) => {\n  const location = useLocation();\n  const { node: nodeFromLink } = location.state;\n\n  const stringifyBreadcrumb = (breadcrumb) => {\n    if (breadcrumb.length === 1) {\n      return breadcrumb;\n    }\n    let path = \"\";\n\n    breadcrumb.forEach((crumb) => {\n      path = path + crumb + \" › \";\n    });\n    return path;\n  };\n\n  let newNode = {};\n\n  if (nodeFromLink) {\n    newNode = {\n      title: nodeFromLink.title,\n      path: stringifyBreadcrumb(nodeFromLink.breadCrumb),\n      status: nodeFromLink.state.toString(),\n      output: nodeFromLink.output,\n    };\n  } else {\n    // Node from properties\n    newNode = {\n      title: propNode.title,\n      path: propPath,\n      status: propNode.state.toString(),\n      output: propNode.output,\n    };\n  }\n\n  return (\n    <>\n      <Navigation title={\"\"} />\n      <div className=\"alert\">\n        <StatusIcon count={\"1\"} status={newNode.status}></StatusIcon>\n      </div>\n      <p className=\"small\">{newNode.path}</p>\n      <h5 className=\"\">{newNode.title}</h5>\n\n      <p className=\"output\">{newNode.output}</p>\n\n      <hr className=\"\" />\n      <div className=\"row\">\n        <p>Unassigned</p>\n        <div className=\"link far-right\">More &gt;</div>\n      </div>\n    </>\n  );\n};\n\nexport default Node;\n","import Node from \"./Node\";\n\nimport { Link } from \"react-router-dom\";\n\nconst NodeCard = ({ node }) => {\n  const stringifyBreadcrumb = (breadcrumb) => {\n    return breadcrumb.length === 1\n      ? breadcrumb[0]\n      : breadcrumb.length === 2\n      ? breadcrumb[0] + \" › \" + breadcrumb[1]\n      : breadcrumb[0] + \" › . . . › \" + breadcrumb[breadcrumb.length - 1];\n  };\n\n  const path = stringifyBreadcrumb(node.breadCrumb);\n\n  return (\n    <Link to=\"/Node\" key={node.title} state={{ node }}>\n      <div className=\"card\">\n        <Node propPath={path} propNode={node} />\n      </div>\n    </Link>\n  );\n};\n\nexport default NodeCard;\n","import { useContext } from \"react\";\nimport { NodesContext } from \"../StatusContext\";\nimport { useLocation } from \"react-router-dom\";\nimport Navigation from \"./Navigation\";\nimport NodeCard from \"./NodeCard\";\n\nconst AlertList = () => {\n  const globalNodes = useContext(NodesContext);\n\n  const location = useLocation();\n  const { title } = location.state;\n\n  const alertCards = [];\n\n  const getAlertsForNode = (node, breadcrumb) => {\n    if (node.state !== 0) {\n      node.breadCrumb = breadcrumb;\n      alertCards.push(node);\n    }\n\n    breadcrumb = breadcrumb.concat(node.title);\n\n    if (node.nodes === undefined) return;\n\n    node.nodes.forEach((innerNode) => {\n      getAlertsForNode(innerNode, breadcrumb);\n    });\n  };\n\n  const topNode = globalNodes.find((node) => node.title === title);\n\n  if (topNode) {   \n    getAlertsForNode(topNode, []);\n  } else {\n    return false; // Rerender the page at refresh. It works...\n  }\n  \n  return (\n    <>\n      <Navigation title={topNode.title} />\n      {alertCards.length > 0 ? <h5>Varningar</h5> : <h5>Allt är ok</h5>}\n      <div className=\"spacer\" />\n      {alertCards.map((node) => (\n        <NodeCard node={node} key={node.title} />\n      ))}\n    </>\n  );\n};\n\nexport default AlertList;\n","import StatusIcon from \"./StatusIcon\";\n\nconst Indicator = ({ count, status }) => {\n  return (\n    <div className=\"indicator\">\n      <StatusIcon count={count} status={status}></StatusIcon>\n      <p>{count}</p>\n    </div>\n  );\n};\n\nexport default Indicator;\n","import Indicator from \"./Indicator\";\n\nconst StatusCard = ({ statusCard }) => {\n  return (\n    <div className=\"card\">\n      <h5>{statusCard.title} </h5>\n\n      <div className=\"indicators\">\n        {statusCard.nodeStatus.map((nodeStat) => (\n          <Indicator\n            count={nodeStat.count.toString()}\n            status={nodeStat.state}\n            key={nodeStat.state}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default StatusCard;\n","import { Link } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport { NodesContext } from \"../StatusContext\";\nimport StatusCard from \"./StatusCard\";\n\nconst Dashboard = () => {\n  const statusCardsData = [];\n  const getStatusCardsData = (node) => {\n    const newNodeStatus = [\n      { state: \"0\", count: 0 },\n      { state: \"1\", count: 0 },\n      { state: \"2\", count: 0 },\n    ];\n\n    const getStatusForAllNodes = (nodes) => {\n      nodes.forEach((node) => {\n        node.state === 2 // Danger\n          ? newNodeStatus[2].count++\n          : node.state === 1 // Warning\n          ? newNodeStatus[1].count++\n          : newNodeStatus[0].count++; // All good\n\n        if (node.nodes) {\n          getStatusForAllNodes(node.nodes); // Recursive\n        }\n      });\n\n      return newNodeStatus;\n    };\n\n    const statusCardData = {\n      title: node.title,\n      nodeStatus: getStatusForAllNodes(node.nodes),\n    };\n\n    statusCardsData.push(statusCardData);\n  };\n\n  const nodes = useContext(NodesContext);\n\n  if (nodes.length === 0) {\n    return <div>Lyckades inte hämta data</div>;\n  }\n\n  nodes.forEach((node) => {\n    getStatusCardsData(node);\n  });\n\n  return (\n    <>\n      <h4>Överblick (BI)</h4>\n      {statusCardsData.map((statusCardData) => (\n        <Link\n          to=\"/AlertList\"\n          key={statusCardData.title}\n          state={{ title: statusCardData.title }}\n        >\n          <StatusCard statusCard={statusCardData} key={statusCardData.title} />\n        </Link>\n      ))}\n    </>\n  );\n};\n\nexport default Dashboard;\n","export default __webpack_public_path__ + \"static/media/logo.b4b77e27.png\";","import \"./App.css\";\nimport { StatusProvider } from \"./StatusContext\";\nimport \"./FontAwesome\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport AlertList from \"./Components/AlertList\";\nimport Dashboard from \"./Components/Dashboard\";\nimport Node from \"./Components/Node\";\nimport logo from \"./logo.png\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Router>\n        <StatusProvider>\n          <Routes>\n            <Route path=\"/\" element={<Dashboard />} />\n            <Route path=\"/alertlist\" element={<AlertList />} />\n            <Route path=\"/node\" element={<Node />} />\n          </Routes>\n          <img className=\"logo\" src={logo} alt=\"Rg19 logo\" />\n        </StatusProvider>\n      </Router>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}